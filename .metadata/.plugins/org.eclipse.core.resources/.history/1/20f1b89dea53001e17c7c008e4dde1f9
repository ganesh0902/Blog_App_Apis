package com.api.service.impl;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.api.entities.Category;
import com.api.entities.Post;
import com.api.entities.User;
import com.api.exceptions.ResourceNotFoundException;
import com.api.payloads.CategoryDto;
import com.api.payloads.PostDto;
import com.api.repository.CategoryRepo;
import com.api.repository.PostRepo;
import com.api.repository.UserRepo;
import com.api.service.PostService;

@Service
public class PostServiceImpl implements PostService{

	@Autowired
	private PostRepo postRepo;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	private CategoryRepo categoryRepo;
	
	@Autowired
	private UserRepo userRepo;
	
	@Override
	 public PostDto createPost(PostDto postDto,int userId,int categoryId)
	{
		PostDto postdto =null;
		try {
								
			    User user = userRepo.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User","userId", userId));			
			    Category category = categoryRepo.findById(categoryId).orElseThrow(()-> new ResourceNotFoundException("Category"," CategoryId", categoryId));			
			
			Post map = this.modelMapper.map(postDto,Post.class);
			map.setImageName("default.pmg");
			map.setAddedDate(new Date());
			map.setUser(user);
			map.setCategory(category);
			
			Post save = this.postRepo.save(map);
			
			postdto = this.modelMapper.map(save,PostDto.class);
			
			System.out.println(postDto);
		} catch (ResourceNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}				
		return postdto;
	}
	@Override
	public PostDto updatePost(PostDto post, int postId) {
		// TODO Auto-generated method stub
				
		PostDto map = null;
		try {
			
			Post map2 = this.modelMapper.map(post,Post.class);
			Post updatedPost = this.postRepo.findById(postId).orElseThrow(()->new ResourceNotFoundException("Post"," Id ", postId));
			
			updatedPost.setTitle(map2.getTitle());
			updatedPost.setContent(map2.getContent());
			//updatedPost.setCategory(map2.getCategory());
			//updatedPost.setUser(map2.getUser());
									
			Post save = this.postRepo.save(updatedPost);
			
			map=this.modelMapper.map(save,PostDto.class);						
			
		} catch (ResourceNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
				
		return map;
	}

	@Override
	public void deletePost(int id) {
		
		this.postRepo.deleteById(id);		
	}

	@Override
	public PostDto getPostById(int id) {
		PostDto map =null;
		try {
			Post post = this.postRepo.findById(id).orElseThrow(()-> new ResourceNotFoundException("Post"," Id ", id));
			
			  map = this.modelMapper.map(post,PostDto.class);
			
		} catch (ResourceNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public List<PostDto> getAllPost() {
		// TODO Auto-generated method stub
		int pageSize=5;
		int pageNumber=1;
		
		List<Post> allPost = this.postRepo.findAll();
		
		//below code for Pagination
		//PageRequest request = PageRequest.of(pageNumber, pageSize);		
		//Page<Post> pagePost = this.postRepo.findAll(request);		
		//List<Post> allPost = pagePost.getContent();
		
		
		List<PostDto> collect = allPost.stream().map((post)->this.modelMapper.map(post,PostDto.class)).collect(Collectors.toList());
		return collect;
	}

	@Override
	public List<PostDto> getPostByCategory(int categoryId) {
		// TODO Auto-generated method stub	
		List<PostDto> listOfPostcollect =null;
		try {
			
			Category category = this.categoryRepo.findById(categoryId).orElseThrow(()->new ResourceNotFoundException("Category","Id", categoryId));
		
			List<Post> listOfPost = this.postRepo.findByCategory(category);
						
			listOfPostcollect = listOfPost.stream().map(post->this.modelMapper.map(post,PostDto.class)).collect(Collectors.toList());
		
		
		} catch (ResourceNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return listOfPostcollect;
	}

	@Override
	public List<PostDto> getPostByUser(int userId) {
		List<PostDto> list =null;
		try {
			
			User user = this.userRepo.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User"," Id ", userId));
		
			List<Post> listOfPost = this.postRepo.findByUser(user);	
			
			 list = listOfPost.stream().map((post)->this.modelMapper.map(post,PostDto.class)).collect(Collectors.toList());
			
			 System.out.println(list);
		} catch (ResourceNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return list;
	}

	@Override
	public List<PostDto> searchByPosts(String keyword) {
			
		System.out.println(keyword);
		
		//List<Post> byTitleContaining = this.postRepo.findByTitleContaining(keyword);
		
		//System.out.println(this.postRepo.findByTitle(keyword));
		//List<PostDto> collect = byTitleContaining.stream().map(post->this.modelMapper.map(byTitleContaining,PostDto.class)).collect(Collectors.toList());
		
		return null;
	}
}
