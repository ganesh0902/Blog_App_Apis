package com.api.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.api.entities.Post;
import com.api.payloads.PostDto;
import com.api.service.impl.FileServiceImpl;
import com.api.service.impl.PostServiceImpl;

@RestController
@RequestMapping("/api/")
public class PostController {

	@Autowired
	private PostServiceImpl postServiceImpl;
	
	@Autowired
	private FileServiceImpl fileServiceImpl;
	
	@Value("${project.image}")
	private String path;
	
	@PostMapping("/user/{userId}/category/{categoryId}/posts")
	public ResponseEntity<PostDto> createPost(@RequestBody PostDto postDto,@PathVariable("userId") int userId,@PathVariable("categoryId") int categoryId)
	{		
		PostDto createPost =postServiceImpl.createPost(postDto,userId,categoryId);
		//System.out.println(createPost);
		return new ResponseEntity<PostDto>(createPost,HttpStatus.CREATED);
	}
	@GetMapping("/user/{userId}/posts")
	public ResponseEntity<List<PostDto>> getPostByUser(@PathVariable("userId") int userId)
	{
		List<PostDto> postByUser = this.postServiceImpl.getPostByUser(userId);
		
		return new ResponseEntity<List<PostDto>>(postByUser,HttpStatus.OK);
	}
	@GetMapping("/category/{categoryId}/posts")
	public ResponseEntity<List<PostDto>> getPostsByCategory(@PathVariable("categoryId") int categoryId)
	{
		List<PostDto> postByCategory = this.postServiceImpl.getPostByCategory(categoryId);
				
		return new  ResponseEntity<List<PostDto>>(postByCategory,HttpStatus.OK);		
	}
	@GetMapping("/posts")
	public ResponseEntity<List<PostDto>> getAllPost()
	{
		List<PostDto> allPost = this.postServiceImpl.getAllPost();
		
		return new ResponseEntity<List<PostDto>>(allPost,HttpStatus.OK);
	}
	@GetMapping("/posts/{postId}")
	public ResponseEntity<PostDto> getPostById(@PathVariable("postId") int postId)
	{
		PostDto postById = this.postServiceImpl.getPostById(postId);
		
		return new ResponseEntity<PostDto>(postById,HttpStatus.OK);
	}
	@PutMapping("/posts/{postId}")
	public ResponseEntity<PostDto> updatePostById(@RequestBody PostDto postDto,  @PathVariable("postId") int postId)
	{
		
		PostDto updatePost = postServiceImpl.updatePost(postDto, postId);
		
		return new ResponseEntity<PostDto>(updatePost,HttpStatus.OK);
	}
	@DeleteMapping("/posts/{postId}")
	public ResponseEntity<?> deletePostById(@PathVariable("postId") int postId)
	{
		postServiceImpl.deletePost(postId);		
		return  ResponseEntity.ok().body(" Successfully : Post Deleted ");
	}
	@GetMapping("/search/{title}")
	public ResponseEntity<List<PostDto>> searchByTitle(@PathVariable("title") String title)
	{
		
		List<PostDto> searchByPosts = this.postServiceImpl.searchByPosts(title);
				
		return new ResponseEntity<List<PostDto>>(searchByPosts,HttpStatus.OK);				
	}
	@PostMapping("/post/image/upload/{postId}")
	public ResponseEntity<PostDto> uploadPostImage(@RequestParam("image") MultipartFile image,
													@PathVariable("postId") int postId)
	{	
		PostDto postDto = this.postServiceImpl.getPostById(postId);
		
		String uploadImage = this.fileServiceImpl.uploadImage(path, image);			
		
		postDto.setImageName(uploadImage);
		//System.out.println(postDto);
		PostDto updatePost = this.postServiceImpl.updatePost(postDto, postId);
		
		return new ResponseEntity<PostDto>(updatePost,HttpStatus.OK);
	}
}