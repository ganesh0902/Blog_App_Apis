package com.api.service.impl;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;

import com.api.entities.Category;
import com.api.exceptions.ResourceNotFoundException;
import com.api.payloads.CategoryDto;
import com.api.repository.CategoryRepo;
import com.api.service.CategoryService;

public class CategoryServiceimpl implements CategoryService{

	@Autowired
	private CategoryRepo categoryRepo;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Override
	public CategoryDto createCategory(CategoryDto categoryDto) {

		Category category = this.modelMapper.map(categoryDto,Category.class);		
		categoryRepo.save(category);						
		return this.modelMapper.map(category,CategoryDto.class);
	}

	@Override
	public CategoryDto updateCategory(CategoryDto categoryDto, int id) {
		
		 CategoryDto dto = null;
		 
		try {
			
			Category category = categoryRepo.findById(id).orElseThrow(()-> new ResourceNotFoundException("Category"," Id ", id));			
			category.setCategoryTitle(categoryDto.getCategoryTitle());
			category.setCategoryDescription(categoryDto.getCategoryDescription());			
			categoryRepo.save(category);
			
			 dto = this.modelMapper.map(category,CategoryDto.class);
			 
		} catch (ResourceNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return dto;
	}

	@Override
	public CategoryDto deletecategory(int id) {
		
		categoryRepo.deleteById(id);
		return null;
	}

	@Override
	public CategoryDto getCategory(int id){

		CategoryDto map=null; 
		
		try {
			
			Category category = categoryRepo.findById(id).orElseThrow(()->new ResourceNotFoundException("Category","Id", id));
			
			map = this.modelMapper.map(category,CategoryDto.class);						
			
		} catch (ResourceNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return map;
	}

	@Override
	public List<CategoryDto> getAllCategory(){
		
		List<Category> findAll = categoryRepo.findAll();
		
		 findAll.stream().map(cat-> this.modelMapper.map(cat, CategoryDto.class)).collect(Collectors.toList());
		
		return null;
	}

}
